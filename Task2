/*Develop a sophisticated Java program to manage various aspects of a
hospital or healthcare facility. This system should include modules for
patient registration, appointment scheduling, electronic health records
(EHR), billing and invoicing, inventory management for medical supplies,
and staff management.*/


import java.util.*;

class HospitalManagementSystem {

    // Main Menu
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Hospital hospital = new Hospital();

        while (true) {
            System.out.println("\n--- Hospital Management System ---");
            System.out.println("1. Patient Registration");
            System.out.println("2. Appointment Scheduling");
            System.out.println("3. Electronic Health Records (EHR)");
            System.out.println("4. Billing and Invoicing");
            System.out.println("5. Inventory Management");
            System.out.println("6. Staff Management");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1 -> hospital.patientRegistration(scanner);
                case 2 -> hospital.scheduleAppointment(scanner);
                case 3 -> hospital.manageEHR(scanner);
                case 4 -> hospital.billingAndInvoicing(scanner);
                case 5 -> hospital.inventoryManagement(scanner);
                case 6 -> hospital.staffManagement(scanner);
                case 7 -> {
                    System.out.println("Exiting the system. Goodbye!");
                    return;
                }
                default -> System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}

class Hospital {
    private List<Patient> patients = new ArrayList<>();
    private List<Appointment> appointments = new ArrayList<>();
    private List<Staff> staffMembers = new ArrayList<>();
    private Map<String, Integer> inventory = new HashMap<>();

    // Module 1: Patient Registration
    public void patientRegistration(Scanner scanner) {
        System.out.print("Enter patient name: ");
        String name = scanner.nextLine();
        System.out.print("Enter patient age: ");
        int age = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter patient contact number: ");
        String contact = scanner.nextLine();

        Patient patient = new Patient(name, age, contact);
        patients.add(patient);
        System.out.println("Patient registered successfully with ID: " + patient.getId());
    }

    // Module 2: Appointment Scheduling
    public void scheduleAppointment(Scanner scanner) {
        System.out.print("Enter patient ID: ");
        int patientId = scanner.nextInt();
        scanner.nextLine();
        System.out.print("Enter doctor name: ");
        String doctor = scanner.nextLine();
        System.out.print("Enter appointment date (YYYY-MM-DD): ");
        String date = scanner.nextLine();

        Optional<Patient> patient = patients.stream().filter(p -> p.getId() == patientId).findFirst();
        if (patient.isPresent()) {
            Appointment appointment = new Appointment(patient.get(), doctor, date);
            appointments.add(appointment);
            System.out.println("Appointment scheduled successfully with ID: " + appointment.getId());
        } else {
            System.out.println("Patient not found!");
        }
    }

    // Module 3: Electronic Health Records (EHR)
    public void manageEHR(Scanner scanner) {
        System.out.print("Enter patient ID: ");
        int patientId = scanner.nextInt();
        scanner.nextLine();

        Optional<Patient> patient = patients.stream().filter(p -> p.getId() == patientId).findFirst();
        if (patient.isPresent()) {
            System.out.println("Health Records for " + patient.get().getName() + ":");
            patient.get().displayHealthRecords();
            System.out.print("Add new record? (yes/no): ");
            if (scanner.nextLine().equalsIgnoreCase("yes")) {
                System.out.print("Enter health record details: ");
                String record = scanner.nextLine();
                patient.get().addHealthRecord(record);
                System.out.println("Health record added successfully.");
            }
        } else {
            System.out.println("Patient not found!");
        }
    }

    // Module 4: Billing and Invoicing
    public void billingAndInvoicing(Scanner scanner) {
        System.out.print("Enter patient ID: ");
        int patientId = scanner.nextInt();
        scanner.nextLine();
        System.out.print("Enter billing amount: ");
        double amount = scanner.nextDouble();

        Optional<Patient> patient = patients.stream().filter(p -> p.getId() == patientId).findFirst();
        if (patient.isPresent()) {
            System.out.println("Invoice generated for " + patient.get().getName() + ": $" + amount);
        } else {
            System.out.println("Patient not found!");
        }
    }

    // Module 5: Inventory Management
    public void inventoryManagement(Scanner scanner) {
        System.out.print("Enter item name: ");
        String item = scanner.nextLine();
        System.out.print("Enter quantity to add: ");
        int quantity = scanner.nextInt();
        scanner.nextLine();

        inventory.put(item, inventory.getOrDefault(item, 0) + quantity);
        System.out.println("Inventory updated successfully.");
    }

    // Module 6: Staff Management
    public void staffManagement(Scanner scanner) {
        System.out.print("Enter staff name: ");
        String name = scanner.nextLine();
        System.out.print("Enter staff role: ");
        String role = scanner.nextLine();

        Staff staff = new Staff(name, role);
        staffMembers.add(staff);
        System.out.println("Staff member added successfully with ID: " + staff.getId());
    }
}

class Patient {
    private static int counter = 1;
    private int id;
    private String name;
    private int age;
    private String contact;
    private List<String> healthRecords = new ArrayList<>();

    public Patient(String name, int age, String contact) {
        this.id = counter++;
        this.name = name;
        this.age = age;
        this.contact = contact;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void addHealthRecord(String record) {
        healthRecords.add(record);
    }

    public void displayHealthRecords() {
        if (healthRecords.isEmpty()) {
            System.out.println("No health records available.");
        } else {
            healthRecords.forEach(System.out::println);
        }
    }
}

class Appointment {
    private static int counter = 1;
    private int id;
    private Patient patient;
    private String doctor;
    private String date;

    public Appointment(Patient patient, String doctor, String date) {
        this.id = counter++;
        this.patient = patient;
        this.doctor = doctor;
        this.date = date;
    }

    public int getId() {
        return id;
    }
}

class Staff {
    private static int counter = 1;
    private int id;
    private String name;
    private String role;

    public Staff(String name, String role) {
        this.id = counter++;
        this.name = name;
        this.role = role;
    }

    public int getId() {
        return id;
    }
}
